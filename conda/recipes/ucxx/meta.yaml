# SPDX-FileCopyrightText: Copyright (c) 2023, NVIDIA CORPORATION & AFFILIATES.
# SPDX-License-Identifier: BSD-3-Clause

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  minor_version: ${{ (version | split('.'))[:2] | join(".") }}
  cuda_version: ${{ (env.get('RAPIDS_CUDA_VERSION') | split('.'))[:2] | join(".") }}
  cuda_major: ${{ (env.get('RAPIDS_CUDA_VERSION') | split('.'))[0] }}
  date_string: ${{ env.get("RAPIDS_DATE_STRING") }}

recipe:
  version: ${{ version }}

source:
  path: ../../..

cache:
  build:
    script:
      file: build.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ env.get("AWS_ACCESS_KEY_ID", default="") }}
        AWS_SECRET_ACCESS_KEY: ${{ env.get("AWS_SECRET_ACCESS_KEY", default="") }}
        AWS_SESSION_TOKEN: ${{ env.get("AWS_SESSION_TOKEN", default="") }}
        CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
        CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
        CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
        PARALLEL_LEVEL: ${{ env.get("PARALLEL_LEVEL") }}
        RAPIDS_ARTIFACTS_DIR: ${{ env.get("RAPIDS_ARTIFACTS_DIR", default="") }}
        SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
        SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
        SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
        SCCACHE_S3_KEY_PREFIX: ${{ "libucxx-linux64" if linux64 else "libucxx-aarch64" if aarch64 }}
        SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
        SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
  requirements:
    ignore_run_exports:
      from_package:
        # librmm is showing up, which also indicates an error in librmm's conda
        # package. It shouldn't have a run export on itself since it's header-only.
        # It should run export the relevant CTK libs (mainly cudart) so that its APIs
        # can be called in any code that uses rmm functions, though.
        #- librmm
        - python
        - ucx
        - if: cuda_major == "11"
          then:
            - ${{ compiler('cuda11') }}
          else:
            - ${{ compiler('cuda') }}
    build:
      - cmake
      - ${{ compiler('c') }}
      - ${{ compiler('cxx') }}
      - if: cuda_major == "11"
        then:
          - ${{ compiler('cuda11') }} =${{ cuda_version }}
        else:
          - ${{ compiler('cuda') }}
      - cuda-version =${{ cuda_version }}
      - ninja
      - git
      - ${{ stdlib("c") }}
    host:
      - if: cuda_major == "11"
        then:
          - cuda-cudart-dev
      - cuda-version =${{ cuda_version }}
      - rapids-build-backend >=0.3.0,<0.4.0.dev0
      - conda-forge::ucx
      - python
      - librmm ${{ rapids_version }}

outputs:
  - package:
      name: libucxx
    build:
      script: install_libucxx.sh
      number: ${{ GIT_DESCRIBE_NUMBER }}
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ GIT_DESCRIBE_HASH }}_${{ GIT_DESCRIBE_NUMBER }}
      files:
        exclude:
          - tmp/*
    requirements:
      run_exports:
        - ${{ pin_subpackage("libucxx", upper_bound="x.x") }}
      build:
        - cmake
      host:
        - cuda-version =${{ cuda_version }}
      run:
        - if: cuda_major == "11"
          then:
            - cudatoolkit
        - ${{ pin_compatible('cuda-version', upper_bound='x', lower_bound='x') }}
        - conda-forge::ucx >=1.15.0,<1.16.0
    tests:
      - script:
        - test -f $PREFIX/lib/libucxx.so
        - test -f $PREFIX/include/ucxx/utils/python.h
        - test -f $PREFIX/include/ucxx/utils/file_descriptor.h
        - test -f $PREFIX/include/ucxx/utils/sockaddr.h
        - test -f $PREFIX/include/ucxx/utils/ucx.h
        - test -f $PREFIX/include/ucxx/notifier.h
        - test -f $PREFIX/include/ucxx/address.h
        - test -f $PREFIX/include/ucxx/component.h
        - test -f $PREFIX/include/ucxx/delayed_submission.h
        - test -f $PREFIX/include/ucxx/inflight_requests.h
        - test -f $PREFIX/include/ucxx/listener.h
        - test -f $PREFIX/include/ucxx/api.h
        - test -f $PREFIX/include/ucxx/request_helper.h
        - test -f $PREFIX/include/ucxx/request_stream.h
        - test -f $PREFIX/include/ucxx/request_tag.h
        - test -f $PREFIX/include/ucxx/typedefs.h
        - test -f $PREFIX/include/ucxx/context.h
        - test -f $PREFIX/include/ucxx/endpoint.h
        - test -f $PREFIX/include/ucxx/request.h
        - test -f $PREFIX/include/ucxx/worker_progress_thread.h
        - test -f $PREFIX/include/ucxx/constructors.h
        - test -f $PREFIX/include/ucxx/request_tag_multi.h
        - test -f $PREFIX/include/ucxx/buffer.h
        - test -f $PREFIX/include/ucxx/config.h
        - test -f $PREFIX/include/ucxx/future.h
        - test -f $PREFIX/include/ucxx/header.h
        - test -f $PREFIX/include/ucxx/worker.h
        - test -f $PREFIX/include/ucxx/exception.h
        - test -f $PREFIX/include/ucxx/log.h
        requirements:
          run:
            # This shouldn't be needed because it is already a run requirement
            # of libucx, but right now we have to have it to specify channel
            # priority (we can't pull the one on the RAPIDS channel).
            - conda-forge::ucx >=1.15.0,<1.16.0
    about:
      homepage: https://rapids.ai/
      repository: https://github.com/rapidsai/ucxx
      license: BSD-3-Clause
      license_family: BSD
      license_file: LICENSE
      summary: libucxx library

  # TODO: Check on overdepending/overlinking warnings.
  - package:
      name: libucxx-examples
    build:
      script: install_libucxx_examples.sh
      number: ${{ GIT_DESCRIBE_NUMBER }}
      string: ${{ date_string }}_${{ GIT_DESCRIBE_HASH }}_${{ GIT_DESCRIBE_NUMBER }}
      files:
        exclude:
          - tmp/*
    requirements:
      build:
        - cmake
      run:
        - ${{ pin_subpackage('libucxx', exact=True) }}
    about:
      homepage: https://rapids.ai/
      repository: https://github.com/rapidsai/ucxx
      license: BSD-3-Clause
      license_family: BSD
      license_file: LICENSE
      summary: libucxx examples executables
  
  - package:
      name: libucxx-tests
    build:
      script: install_libucxx_tests.sh
      number: ${{ GIT_DESCRIBE_NUMBER }}
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ GIT_DESCRIBE_HASH }}_${{ GIT_DESCRIBE_NUMBER }}
      files:
        exclude:
          - tmp/*
    requirements:
      build:
        - cmake
      run:
        - ${{ pin_subpackage('libucxx', exact=True) }}
  
    about:
      homepage: https://rapids.ai/
      repository: https://github.com/rapidsai/ucxx
      license: BSD-3-Clause
      license_family: BSD
      license_file: LICENSE
      summary: libucxx tests executables
  
  - package:
      name: ucxx
    build:
      script:
        file: build_and_install_ucxx.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ env.get("AWS_ACCESS_KEY_ID", default="") }}
          AWS_SECRET_ACCESS_KEY: ${{ env.get("AWS_SECRET_ACCESS_KEY", default="") }}
          AWS_SESSION_TOKEN: ${{ env.get("AWS_SESSION_TOKEN", default="") }}
          CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
          CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
          CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
          PARALLEL_LEVEL: ${{ env.get("PARALLEL_LEVEL") }}
          RAPIDS_ARTIFACTS_DIR: ${{ env.get("RAPIDS_ARTIFACTS_DIR", default="") }}
          SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
          SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
          SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
          SCCACHE_S3_KEY_PREFIX: ${{ "libucxx-linux64" if linux64 else "libucxx-aarch64" if aarch64 }}
          SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
          SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
      number: ${{ GIT_DESCRIBE_NUMBER }}
      string: cuda${{ cuda_major }}_py${{ python }}_${{ date_string }}_${{ GIT_DESCRIBE_HASH }}_${{ GIT_DESCRIBE_NUMBER }}
      files:
        exclude:
          - tmp/*
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
        - if: cuda_major == "11"
          then:
            - ${{ compiler('cuda11') }} =${{ cuda_version }}
          else:
            - ${{ compiler('cuda') }}
        - cuda-version =${{ cuda_version }}
        - ninja
        - ${{ stdlib("c") }}
      host:
        - python
        - pip
        - scikit-build-core >=0.7.0
        - cython >=3.0.0
        - ${{ pin_subpackage('libucxx', exact=True) }}
        # Channel priority strikes again (we should inherit ucx from libucxx,
        # but we can't inherit the channel specifier).
        - conda-forge::ucx
        - rapids-build-backend >=0.3.0,<0.4.0.dev0
        - rmm ${{ rapids_version }}
        - cuda-version ${{ cuda_version }}
      run:
        - python * *_cpython
        # Channel priority strikes again (we should inherit ucx from libucxx,
        # but we can't inherit the channel specifier).
        - conda-forge::ucx >=1.15.0,<1.16.0
        - ${{ pin_compatible('rmm', upper_bound='x.x') }}
        - numpy >=1.23,<2.0a0
        - pynvml >=11.4.1
      run_constraints:
        - cupy >=9.5.0
        - numba >=0.57.0
    tests:
      - script:
        - test -f $PREFIX/lib/libucxx_python.so
        - test -f $PREFIX/include/ucxx/python/exception.h
        - test -f $PREFIX/include/ucxx/python/future.h
        - test -f $PREFIX/include/ucxx/python/api.h
        - test -f $PREFIX/include/ucxx/python/constructors.h
        - test -f $PREFIX/include/ucxx/python/notifier.h
        - test -f $PREFIX/include/ucxx/python/python_future.h
        - test -f $PREFIX/include/ucxx/python/worker.h
        requirements:
          run:
            # This shouldn't be needed because it is already a run requirement
            # of libucx, but right now we have to have it to specify channel
            # priority (we can't pull the one on the RAPIDS channel).
            - conda-forge::ucx >=1.15.0,<1.16.0
      # Python tests don't currently support specifying requirements, so we
      # can't work around the channel priority here.
      # https://github.com/prefix-dev/rattler-build/issues/976
      #- python:
      #    imports:
      #      - ucxx
    about:
      homepage: https://rapids.ai/
      repository: https://github.com/rapidsai/ucxx
      license: BSD-3-Clause
      license_family: BSD
      license_file: LICENSE
      summary: UCX Python interface built on top of the libucxx C++ implementation
  
  - package:
      name: distributed-ucxx
    build:
      script: build_and_install_distributed_ucxx.sh
      number: ${{ GIT_DESCRIBE_NUMBER }}
      string: py${{ python }}_${{ date_string }}_${{ GIT_DESCRIBE_HASH }}_${{ GIT_DESCRIBE_NUMBER }}
      files:
        exclude:
          - tmp/*
    requirements:
      host:
        - python
        - pip
        - rapids-build-backend >=0.3.0,<0.4.0.dev0
        - setuptools
        - wheel
      run:
        - python * *_cpython
        - rapids-dask-dependency ${{ rapids_version }}
        - ${{ pin_subpackage('ucxx', upper_bound='x.x') }}
    # Python tests don't currently support specifying requirements, so we
    # can't work around the channel priority here.
    # https://github.com/prefix-dev/rattler-build/issues/976
    #tests:
    #  - python:
    #      imports:
    #        - distributed_ucxx
    about:
      homepage: https://rapids.ai/
      repository: https://github.com/rapidsai/ucxx
      license: BSD-3-Clause
      license_family: BSD
      license_file: LICENSE
      summary: UCX communication module for Dask Distributed
